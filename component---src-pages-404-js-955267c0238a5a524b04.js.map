{"version":3,"sources":["webpack:///./src/components/SEO/SEO.js","webpack:///./src/pages/404.js"],"names":["SEO","_ref","description","lang","meta","title","site","_1620376682","data","metaDescription","siteMetadata","react_default","a","createElement","Helmet_default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","propTypes","PropTypes","string","arrayOf","object","isRequired","__webpack_exports__","react","SEO_SEO"],"mappings":"gKAYaA,EAAM,SAAAC,GAAwC,IAArCC,EAAqCD,EAArCC,YAAaC,EAAwBF,EAAxBE,KAAMC,EAAkBH,EAAlBG,KAAMC,EAAYJ,EAAZI,MACnCC,EAD+CC,EAAAC,KAC/CF,KAcFG,EAAkBP,GAAeI,EAAKI,aAAaR,YAEzD,OACIS,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACIG,eAAgB,CACZZ,QAEJE,MAAOA,EACPW,cAAa,QAAUV,EAAKI,aAAaL,MACzCD,KAAM,CACF,CACIa,KAAI,cACJC,QAAST,GAEb,CACIU,SAAQ,WACRD,QAASb,GAEb,CACIc,SAAQ,iBACRD,QAAST,GAEb,CACIU,SAAQ,UACRD,QAAO,WAEX,CACID,KAAI,eACJC,QAAO,WAEX,CACID,KAAI,kBACJC,QAASZ,EAAKI,aAAaU,QAE/B,CACIH,KAAI,gBACJC,QAASb,GAEb,CACIY,KAAI,sBACJC,QAAST,IAEfY,OAAOjB,MAKrBJ,EAAIsB,aAAe,CACfnB,KAAI,KACJC,KAAM,GACNF,YAAW,IAGfF,EAAIuB,UAAY,CACZrB,YAAasB,IAAUC,OACvBtB,KAAMqB,IAAUC,OAChBrB,KAAMoB,IAAUE,QAAQF,IAAUG,QAClCtB,MAAOmB,IAAUC,OAAOG,YChFbC,EAAA,0BACXlB,EAAAC,EAAAC,cAACiB,EAAA,SAAD,KACInB,EAAAC,EAAAC,cAACkB,EAAD,CAAK1B,MAAM,mBACXM,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA","file":"component---src-pages-404-js-955267c0238a5a524b04.js","sourcesContent":["/**\n * SEO component that queries for data with\n *    Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nexport const SEO = ({ description, lang, meta, title }) => {\n    const { site } = useStaticQuery(\n        graphql`\n            query {\n                site {\n                    siteMetadata {\n                        title\n                        description\n                        author\n                    }\n                }\n            }\n        `\n    )\n\n    const metaDescription = description || site.siteMetadata.description\n\n    return (\n        <Helmet\n            htmlAttributes={{\n                lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${site.siteMetadata.title}`}\n            meta={[\n                {\n                    name: `description`,\n                    content: metaDescription,\n                },\n                {\n                    property: `og:title`,\n                    content: title,\n                },\n                {\n                    property: `og:description`,\n                    content: metaDescription,\n                },\n                {\n                    property: `og:type`,\n                    content: `website`,\n                },\n                {\n                    name: `twitter:card`,\n                    content: `summary`,\n                },\n                {\n                    name: `twitter:creator`,\n                    content: site.siteMetadata.author,\n                },\n                {\n                    name: `twitter:title`,\n                    content: title,\n                },\n                {\n                    name: `twitter:description`,\n                    content: metaDescription,\n                },\n            ].concat(meta)}\n        />\n    )\n}\n\nSEO.defaultProps = {\n    lang: `en`,\n    meta: [],\n    description: ``,\n}\n\nSEO.propTypes = {\n    description: PropTypes.string,\n    lang: PropTypes.string,\n    meta: PropTypes.arrayOf(PropTypes.object),\n    title: PropTypes.string.isRequired,\n}\n","import React, { Fragment } from \"react\"\n\nimport { SEO } from \"../components/SEO\"\n\nexport default () => (\n    <Fragment>\n        <SEO title=\"404: Not found\" />\n        <h1>NOT FOUND</h1>\n        <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n    </Fragment>\n)\n"],"sourceRoot":""}